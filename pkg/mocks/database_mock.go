// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/db_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgconn"
	pgx "github.com/jackc/pgx/v4"
)

// MockDbIface is a mock of DbIface interface.
type MockDbIface struct {
	ctrl     *gomock.Controller
	recorder *MockDbIfaceMockRecorder
}

// MockDbIfaceMockRecorder is the mock recorder for MockDbIface.
type MockDbIfaceMockRecorder struct {
	mock *MockDbIface
}

// NewMockDbIface creates a new mock instance.
func NewMockDbIface(ctrl *gomock.Controller) *MockDbIface {
	mock := &MockDbIface{ctrl: ctrl}
	mock.recorder = &MockDbIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbIface) EXPECT() *MockDbIfaceMockRecorder {
	return m.recorder
}

// DbClose mocks base method.
func (m *MockDbIface) DbClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DbClose")
}

// DbClose indicates an expected call of DbClose.
func (mr *MockDbIfaceMockRecorder) DbClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbClose", reflect.TypeOf((*MockDbIface)(nil).DbClose))
}

// DbExecuteScalar mocks base method.
func (m *MockDbIface) DbExecuteScalar(query string, args ...interface{}) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DbExecuteScalar", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbExecuteScalar indicates an expected call of DbExecuteScalar.
func (mr *MockDbIfaceMockRecorder) DbExecuteScalar(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbExecuteScalar", reflect.TypeOf((*MockDbIface)(nil).DbExecuteScalar), varargs...)
}

// DbExecuteScalarReturningID mocks base method.
func (m *MockDbIface) DbExecuteScalarReturningID(query string, args ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DbExecuteScalarReturningID", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbExecuteScalarReturningID indicates an expected call of DbExecuteScalarReturningID.
func (mr *MockDbIfaceMockRecorder) DbExecuteScalarReturningID(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbExecuteScalarReturningID", reflect.TypeOf((*MockDbIface)(nil).DbExecuteScalarReturningID), varargs...)
}

// DbQuery mocks base method.
func (m *MockDbIface) DbQuery(query string, responseRowID *int, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{query, responseRowID}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DbQuery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DbQuery indicates an expected call of DbQuery.
func (mr *MockDbIfaceMockRecorder) DbQuery(query, responseRowID interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query, responseRowID}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbQuery", reflect.TypeOf((*MockDbIface)(nil).DbQuery), varargs...)
}

// TxBegin mocks base method.
func (m *MockDbIface) TxBegin() (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxBegin")
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxBegin indicates an expected call of TxBegin.
func (mr *MockDbIfaceMockRecorder) TxBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxBegin", reflect.TypeOf((*MockDbIface)(nil).TxBegin))
}

// TxComplete mocks base method.
func (m *MockDbIface) TxComplete(tx pgx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxComplete", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxComplete indicates an expected call of TxComplete.
func (mr *MockDbIfaceMockRecorder) TxComplete(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxComplete", reflect.TypeOf((*MockDbIface)(nil).TxComplete), tx)
}

// TxCreateTempTable mocks base method.
func (m *MockDbIface) TxCreateTempTable(tx pgx.Tx, tblName, sql string) (*pgconn.StatementDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCreateTempTable", tx, tblName, sql)
	ret0, _ := ret[0].(*pgconn.StatementDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxCreateTempTable indicates an expected call of TxCreateTempTable.
func (mr *MockDbIfaceMockRecorder) TxCreateTempTable(tx, tblName, sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCreateTempTable", reflect.TypeOf((*MockDbIface)(nil).TxCreateTempTable), tx, tblName, sql)
}

// TxQuery mocks base method.
func (m *MockDbIface) TxQuery(tx pgx.Tx, query string) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxQuery", tx, query)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxQuery indicates an expected call of TxQuery.
func (mr *MockDbIfaceMockRecorder) TxQuery(tx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxQuery", reflect.TypeOf((*MockDbIface)(nil).TxQuery), tx, query)
}
